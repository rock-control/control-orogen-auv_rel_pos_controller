name 'auv_rel_pos_controller'

using_library 'motor_controller'
import_types_from 'base'
import_types_from 'motor_controller/PID.hpp'

task_context 'Task' do
    input_port('position_command',"base::AUVPositionCommand")
    input_port('position_sample',"base::samples::RigidBodyState")
    output_port('motion_command',"base::AUVMotionCommand")

    property("timeout","double",30).
        doc("The task is going into fatal if it was not able to generate a non zero "+
            "MotionCommand for longer than n secs")

    property("valid_timespan","double",2).
        doc("Timespan a meassage is considered to be valid.")

    property("rel_z","bool",false).
        doc("if set to false z is interpreated as absolute depth")
    property("rel_heading","bool",true).
        doc("if set to false the heading is interpreated as absolute heading")

    property("controller_x","motor_controller::PIDSettings")
    property("controller_y","motor_controller::PIDSettings")

    runtime_states :WAITING_FOR_VALID_BODYSTATE, :WAITING_FOR_POSITION_COMMAND 
    exception_states :TIMEOUT, :INVALID_POSITION_COMMAND
    
end

deployment 'auv_rel_pos_controller_test' do
  task('auv_rel_pos_controller', 'Task').
    periodic(0.01)
end
